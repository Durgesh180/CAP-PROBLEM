class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
         List<List<Integer>> res=new ArrayList<>();
        if(root==null){
            return res;
        }
        Queue<TreeNode> queue=new LinkedList<>();
       queue.add(root);
        List<Integer> list=new ArrayList<>();
        list.add(root.val);
        res.add(list);
        boolean isForward=true;
        while(!queue.isEmpty()){
            int size=queue.size();
            List<Integer> arr=new ArrayList<>();
            for(int i=1;i<=size;i++){ 
                TreeNode curr=queue.poll();
                 if(!isForward){
                    if(curr.left!=null){
                        queue.add(curr.left);
                        arr.add(curr.left.val);
                     }
                    if(curr.right!=null){
                        queue.add(curr.right);
                        arr.add(curr.right.val);
                }
            }
                else{
                    if(curr.left!=null){
                    queue.add(curr.left);
                    arr.add(curr.left.val);
                }
                if(curr.right!=null){
                    queue.add(curr.right);
                    arr.add(curr.right.val);
                }
                }
            }
            if(isForward){
                isForward=false;
            }
            else{
                isForward=true;
            }
            if(!arr.isEmpty()){
            res.add(0,arr);
            }
        }
    return res;
    }
}
